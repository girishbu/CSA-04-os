#include <stdio.h>

#define MAX_PARTITIONS 4
#define MAX_PROCESSES 5

void worstFit(int partitions[], int numPartitions, int processes[], int numProcesses) {
    int allocation[MAX_PROCESSES];
    int i, j;

    
    for (i = 0; i < numProcesses; i++) {
        allocation[i] = -1;
    }

   
    for (i = 0; i < numProcesses; i++) {
        int worstFitIndex = -1;

        for (j = 0; j < numPartitions; j++) {
            if (processes[i] <= partitions[j]) {
                if (worstFitIndex == -1 || partitions[j] > partitions[worstFitIndex]) {
                    worstFitIndex = j;
                }
            }
        }

        if (worstFitIndex != -1) {
            allocation[i] = worstFitIndex;
            partitions[worstFitIndex] -= processes[i];
        }
    }

   
    printf("Process\tProcess Size\tPartition\n");
    for (i = 0; i < numProcesses; i++) {
        printf("%d\t%d KB\t\t", i + 1, processes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int partitions[MAX_PARTITIONS] = {40, 10, 30, 60};
    int processes[MAX_PROCESSES] = {100, 50, 30, 120, 35};

    printf("Worst-Fit Memory Allocation:\n");
    worstFit(partitions, MAX_PARTITIONS, processes, MAX_PROCESSES);

    return 0;
}

