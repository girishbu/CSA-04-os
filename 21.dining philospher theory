#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2

pthread_mutex_t forks[NUM_PHILOSOPHERS];
int state[NUM_PHILOSOPHERS];

void test(int philosopher_id) {
    if (state[philosopher_id] == HUNGRY &&
        state[(philosopher_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS] != EATING &&
        state[(philosopher_id + 1) % NUM_PHILOSOPHERS] != EATING) {
        state[philosopher_id] = EATING;
        printf("Philosopher %d is eating.\n", philosopher_id);
        pthread_mutex_unlock(&forks[philosopher_id]);
    }
}

void pickup_forks(int philosopher_id) {
    pthread_mutex_lock(&forks[philosopher_id]);
    state[philosopher_id] = HUNGRY;
    printf("Philosopher %d is hungry.\n", philosopher_id);
    test(philosopher_id);
    pthread_mutex_unlock(&forks[philosopher_id]);
}

void return_forks(int philosopher_id) {
    pthread_mutex_lock(&forks[philosopher_id]);
    state[philosopher_id] = THINKING;
    printf("Philosopher %d is thinking.\n", philosopher_id);
    test((philosopher_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS);
    test((philosopher_id + 1) % NUM_PHILOSOPHERS);
    pthread_mutex_unlock(&forks[philosopher_id]);
}

void* philosopher_thread(void* arg) {
    int philosopher_id = *(int*)arg;
    
    while (1) {
        sleep(1);
        pickup_forks(philosopher_id);
        sleep(1);
        return_forks(philosopher_id);
    }
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];
    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
        state[i] = THINKING;
        philosopher_ids[i] = i;
    }
    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&philosophers[i], NULL, philosopher_thread, &philosopher_ids[i]);
    }
    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }
    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }
    
    return 0;
}
