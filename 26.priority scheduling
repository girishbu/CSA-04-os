#include<stdio.h>
#include<stdlib.h>

typedef struct {
    int burst_time;
    int priority;
    int waiting_time;
    int turnaround_time;
} Process;

void compute_waiting_time(Process* processes, int n) {
    int total_waiting_time = 0;
    int i;

    processes[0].waiting_time = 0;

    for (i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].burst_time + processes[i - 1].waiting_time;
        total_waiting_time += processes[i].waiting_time;
    }

    double avg_waiting_time = (double)total_waiting_time / n;
    printf("Average Waiting Time: %.2lf\n", avg_waiting_time);
}

void compute_turnaround_time(Process* processes, int n) {
    int total_turnaround_time = 0;
    int i;

    for (i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].burst_time + processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    double avg_turnaround_time = (double)total_turnaround_time / n;
    printf("Average Turnaround Time: %.2lf\n", avg_turnaround_time);
}

void priority_scheduling(Process* processes, int n) {
    int i, j;
    Process temp;

    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    compute_waiting_time(processes, n);
    compute_turnaround_time(processes, n);
}

int main() {
    int n = 3;
    Process processes[n];

    processes[0].burst_time = 30;
    processes[0].priority = 2;
    processes[1].burst_time = 5;
    processes[1].priority = 1;
    processes[2].burst_time = 12;
    processes[2].priority = 3;

    priority_scheduling(processes, n);

    return 0;
}

